// Generated by CoffeeScript 1.4.0
(function() {
  var Connector, Interface, Master, Server, cluster, colors, componentCount, components, config, connector, cpus, i, level, levels, logger, master, masterInterface, multipleComponents, os, program, server, transports, winston, _i;

  require('coffee-script');

  program = require('commander');

  cluster = require('cluster');

  os = require('os');

  program.version('0.0.0').option('-c, --connector', 'Run a connector instance').option('-s, --server', 'Run a server instance').option('-m, --master [master]', 'Run a master instance, or specify a master to connect to').option('--control <port>', 'Changes the port used for control protocol').option('-S, --suppress', 'Supress logging').option('-v, --verbose', 'Log more detailed stuff').option('-C, --chat', 'Log chat').option('--config [file]', 'Loads the specified config file', '../config').parse(process.argv);

  if (program.config != null) {
    config = require(program.config);
  } else {
    config = {};
  }

  components = {};

  if (program.connector === true) {
    components.connector = program.connector;
  }

  if (program.server === true) {
    components.server = program.server;
  }

  if (program.master === true) {
    components.master = program.master;
  }

  if (!(components.connector || components.server || components.master)) {
    components.connector = components.server = components.master = true;
  }

  componentCount = Number(components.connector) + Number(components.server) + Number(components.master);

  multipleComponents = componentCount > 1;

  config.control = Number(program.control || config.control || 8000);

  config.master = program.master || config.master;

  if (!(config.master || components.master)) {
    console.log('You must either specify a master to connect to or run a master instance');
    program.help();
  }

  winston = require('winston');

  levels = {
    chat: -1,
    debug: 0,
    info: 1,
    warn: 2,
    error: 3
  };

  colors = {
    chat: 'green',
    debug: 'white',
    info: 'cyan',
    warn: 'yellow',
    error: 'red'
  };

  transports = [];

  level = program.suppress ? 'error' : program.chat ? 'chat' : program.verbose ? 'debug' : 'info';

  transports.push(new winston.transports.Console({
    colorize: true,
    level: level
  }));

  logger = new winston.Logger({
    transports: transports,
    levels: levels
  });

  winston.addColors(colors);

  Interface = require('../lib/interface');

  if (!components.master || (components.master && !multipleComponents)) {
    Interface = Interface.websocket;
  }

  if (components.master) {
    logger.info('Initializing master');
    Master = require('../lib/master');
    master = new Master(config, new Interface().listen(config.control));
    master.on('log', function(e, level, message) {
      return logger.log(level, (multipleComponents ? '[master] ' : '') + message);
    });
    master.start();
  }

  masterInterface = components.master ? master["interface"] : config.master;

  if (components.server) {
    logger.info('Initializing server');
    Server = require('../lib/server');
    server = new Server(config, new Interface().listen(config.control), new Interface(masterInterface));
    server.on('log', function(e, level, message) {
      return logger.log(level, (multipleComponents ? '[server] ' : '') + message);
    });
    server.start();
  }

  if (components.connector) {
    Connector = require('../lib/connector');
    if (cluster.isMaster) {
      cpus = os.platform().indexOf('win') === 0 ? 1 : os.cpus().length;
      for (i = _i = 0; 0 <= cpus ? _i < cpus : _i > cpus; i = 0 <= cpus ? ++_i : --_i) {
        cluster.fork();
      }
    } else {
      logger.info('Initializing connector');
      connector = new Connector(config, new Interface(masterInterface));
      connector.on('log', function(e, level, message) {
        return logger.log(level, (multipleComponents ? '[connector] ' : '') + message);
      });
      connector.start();
    }
  }

  setInterval(function() {
    return 0;
  }, 1000 * 1000);

}).call(this);
