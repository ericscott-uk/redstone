{
  "name": "nibbit-nolong",
  "description": "NBT encoder and decoder",
  "version": "0.0.1",
  "author": {
    "name": "Conrad Pankoff",
    "email": "deoxxa@fknsrs.biz",
    "url": "http://www.fknsrs.biz/"
  },
  "url": "http://github.com/deoxxa/nibbit",
  "license": "BSD",
  "repository": {
    "type": "git",
    "url": "git://github.com/deoxxa/nibbit.git"
  },
  "keywords": [
    "nibbit",
    "nbt",
    "parser",
    "generator",
    "encoder",
    "decoder",
    "minecraft"
  ],
  "main": "./lib/index",
  "dependencies": {
    "binary": "0.3.x"
  },
  "devDependencies": {
    "docco": "*"
  },
  "scripts": {
    "docs": "PATH=${PATH}:./node_modules/docco/bin docco lib/*.js"
  },
  "readme": "Nibbit\n======\n\nJavaScript NBT encoder and decoder\n\nOverview\n--------\n\nNibbit is an easy to use encoder and decoder for the NBT serialisation format,\ncreated for and popularised by the game \"Minecraft\". It'll decode uncompressed\nNBT data only - decompression is your job.\n\nFeatures\n--------\n\n1. Accurate encoding and decoding of most NBT tag types (see below for details)\n2. Convenient AST generator functions\n3. Asynchronous and streaming parser (thanks to [node-binary](https://github.com/substack/node-binary))\n\nBugs and Limitations\n--------------------\n\n1. Can't represent integers above 2^53 accurately due to JavaScript's numeric\n   type being `double` all the time.\n2. Can't encode arbitrary objects for the same reason. Not enough information\n   is available about the numbers being encoded. All encoding has to be done\n   on a specially constructed AST.\n\nDocumentation\n-------------\n\nTake a look at docs/ in the repo or [the same thing hosted on github](http://deoxxa.github.com/nibbit).\nPlease note that these are HTML files generated by [docco](http://jashkenas.github.com/docco/)\nso you can also just read the comments in the source files in lib/ if you like.\n\nExample Usage\n-------------\n\n```javascript\nvar fs = require(\"fs\"),\n    zlib = require(\"zlib\"),\n    nibbit = require(\"nibbit\");\n\n// decoding\nfs.readFile(\"./data/test.nbt\", function(err, compressed) {\n  zlib.gunzip(compressed, function(err, uncompressed) {\n    nbt.decode(data, function(err, decoded) {\n      console.log(decoded);\n    });\n  });\n});\n\n// encoding and manual AST construction\nvar ast = nbt.compound([\n  nbt.string(\"Bananrama\", \"name\"),\n], \"hello world\");\n\nnibbit.encode(ast, function(err, uncompressed) {\n  console.log(uncompressed);\n});\n```\n\nLicense\n-------\n\n3-clause BSD. A copy is included with the source.\n\nContact\n-------\n\n* GitHub (http://github.com/deoxxa)\n* Twitter (http://twitter.com/deoxxa)\n* Email (deoxxa@fknsrs.biz)\n",
  "readmeFilename": "README.md",
  "_id": "nibbit-nolong@0.0.1",
  "_from": "nibbit-nolong@0.0.x"
}
