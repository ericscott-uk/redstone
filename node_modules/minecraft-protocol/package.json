{
  "name": "minecraft-protocol",
  "version": "0.7.8",
  "description": "Parse and serialize minecraft packets, plus authentication and encryption.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/superjoe30/node-minecraft-protocol.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "keywords": [
    "minecraft",
    "protocol",
    "parse",
    "serialize",
    "packet",
    "authentication",
    "encrypton",
    "bot"
  ],
  "author": {
    "name": "Andrew Kelley"
  },
  "license": "BSD",
  "engines": {
    "node": ">=0.8.16"
  },
  "devDependencies": {
    "mocha": "~1.7.4",
    "mkdirp": "~0.3.4",
    "rimraf": "~2.1.1",
    "zfill": "0.0.1",
    "batch": "~0.2.1"
  },
  "dependencies": {
    "ursa": "~0.8.0",
    "superagent": "~0.10.0",
    "buffer-equal": "0.0.0"
  },
  "readme": "# minecraft protocol\n\nParse and serialize minecraft packets, plus authentication and encryption.\n\n## Features\n\n * Supports Minecraft version 1.4.7\n * Parses all packets and emits events with packet fields as JavaScript\n   objects.\n * Send a packet by supplying fields as a JavaScript object.\n * Client\n   - Authenticating and logging in\n   - Encryption on and encryption off\n   - Both online and offline mode\n   - Respond to keep-alive packets.\n   - Ping a server for status\n * Server\n   - Offline mode\n   - Encryption and online mode\n   - Handshake\n   - Keep-alive checking\n   - Ping status\n * Robust test coverage. See Test Coverage section below.\n * Optimized for rapidly staying up to date with Minecraft protocol updates.\n\nThis package aims to be a low-level interface to the Minecraft protocol and\nno more. If you want a higher-level API with which to write bots, see\n[mineflayer](https://github.com/superjoe30/mineflayer/)\n\n## Usage\n\n### Echo client example\n\n```js\nvar mc = require('minecraft-protocol');\nvar client = mc.createClient({\n  host: \"localhost\",   // optional\n  port: 25565,         // optional\n  username: \"email@example.com\",\n  password: \"12345678\",\n});\nclient.on(0x03, function(packet) {\n  // Listen for chat messages and echo them back.\n  if (packet.message.indexOf(client.session.username) !== -1) return;\n  client.write(0x03, {\n    message: packet.message,\n  });\n});\n```\n\nIf the server is in offline mode, you may leave out the `password` option.\n\n### Hello World server example\n\n```js\nvar mc = require('minecraft-protocol');\nvar server = mc.createServer({\n  'online-mode': true,   // optional\n  encryption: true,      // optional\n  host: '0.0.0.0',       // optional\n  port: 25565,           // optional\n});\nserver.on('login', function(client) {\n  client.write(0x01, {\n    entityId: client.id,\n    levelType: 'default',\n    gameMode: 0,\n    dimension: 0,\n    difficulty: 2,\n    maxPlayers: server.maxPlayers\n  });\n  client.write(0x0d, {\n    x: 0,\n    y: 1.62,\n    stance: 0,\n    z: 0,\n    yaw: 0,\n    pitch: 0,\n    onGround: true\n  });\n  client.write(0x03, { message: 'Hello, ' + client.username });\n});\n```\n\n## Installation\n\n### Linux\n\n`npm install minecraft-protocol`\n\n### Windows\n\n * Follow the Windows instructions from [Obvious/ursa](https://github.com/Obvious/ursa)\n * `npm install minecraft-protocol`\n\n## Documentation\n\n### mc.ping(options, callback)\n\n`callback(err, pingResults)`\n\n`pingResults`:\n\n * `prefix`\n * `protocol`\n * `version`\n * `motd`\n * `playerCount`\n * `maxPlayers`\n\n### mc.createServer(options)\n\nReturns a `Server` instance and starts listening.\n\n### Server\n\n#### server.onlineModeExceptions\n\nThis is a plain old JavaScript object. Add a key with the username you want to\nbe exempt from online mode or offline mode (whatever mode the server is in).\n\nMake sure the entries in this object are all lower case.\n\n#### server.maxPlayers\n\n### Not Immediately Obvious Data Type Formats\n\n#### entityMetadata\n\nValue looks like this:\n\n```js\n[\n  {type: 'slot', value: slot, key: 3},\n  {type: 'int', value: value, key: 4},\n  ...\n]\n```\n\nWhere the key is the numeric metadata key and the value is the value of the \ncorrect data type.\n\n## Testing\n\n* Ensure your system has the `java` executable in `PATH`.\n* Download the appropriate version of `minecraft_server.jar`.\n* `MC_SERVER_JAR=path/to/minecraft_server.jar MC_USERNAME=email@example.com MC_PASSWORD=password npm test`\n\n### Test Coverage\n\n```\n  packets\n    ✓ 0x00 \n    ✓ 0x01 \n    ✓ 0x02 \n    ✓ 0x03 \n    ✓ 0x04 \n    ✓ 0x05 \n    ✓ 0x06 \n    ✓ 0x07 \n    ✓ 0x08 \n    ✓ 0x09 \n    ✓ 0x0a \n    ✓ 0x0b \n    ✓ 0x0c \n    ✓ 0x0d \n    ✓ 0x0e \n    ✓ 0x0f \n    ✓ 0x10 \n    ✓ 0x11 \n    ✓ 0x12 \n    ✓ 0x13 \n    ✓ 0x14 \n    ✓ 0x16\n    ✓ 0x17 \n    ✓ 0x18 \n    ✓ 0x19 \n    ✓ 0x1a \n    ✓ 0x1c \n    ✓ 0x1d \n    ✓ 0x1e \n    ✓ 0x1f \n    ✓ 0x20 \n    ✓ 0x21 \n    ✓ 0x22 \n    ✓ 0x23 \n    ✓ 0x26 \n    ✓ 0x27 \n    ✓ 0x28 \n    ✓ 0x29 \n    ✓ 0x2a \n    ✓ 0x2b \n    ✓ 0x33 \n    ✓ 0x34 \n    ✓ 0x35 \n    ✓ 0x36 \n    ✓ 0x37 \n    ✓ 0x38 \n    ✓ 0x3c \n    ✓ 0x3d \n    ✓ 0x3e \n    ✓ 0x46 \n    ✓ 0x47 \n    ✓ 0x64 \n    ✓ 0x65 \n    ✓ 0x66 \n    ✓ 0x67 \n    ✓ 0x68 \n    ✓ 0x69 \n    ✓ 0x6a \n    ✓ 0x6b \n    ✓ 0x6c \n    ✓ 0x82 \n    ✓ 0x83 \n    ✓ 0x84 \n    ✓ 0xc8 \n    ✓ 0xc9 \n    ✓ 0xca \n    ✓ 0xcb \n    ✓ 0xcc \n    ✓ 0xcd \n    ✓ 0xfa \n    ✓ 0xfc \n    ✓ 0xfd \n    ✓ 0xfe \n    ✓ 0xff \n\n  client\n    ✓ pings the server\n    ✓ connects successfully - online mode\n    ✓ connects successfully - offline mode\n    ✓ gets kicked when no credentials supplied in online mode\n    ✓ does not crash for 10000ms\n\n  mc-server\n    ✓ starts listening and shuts down cleanly \n    ✓ kicks clients that do not log in\n    ✓ kicks clients that do not send keepalive packets\n    ✓ responds to ping requests \n    ✓ clients can log in and chat\n    ✓ gives correct reason for kicking clients when shutting down \n\n\n  85 tests complete\n```\n\n## History\n\n### 0.7.8\n\n * server: ability to change `motd` and `maxPlayers`\n * server: fix incorrect `playerCount`\n\n### 0.7.7\n\n * server: fix crash when client disconnects quickly\n\n### 0.7.6\n\n * onlineModeExceptions are all lowercase now. fixes security hole.\n\n### 0.7.5\n\n * server: add `onlineModeExceptions`. When server is in:\n   - online mode: these usernames are exempt from online mode.\n   - offline mode: these usernames must authenticate.\n\n### 0.7.4\n\n * server: online mode: don't log in client until username verification\n\n### 0.7.3\n\n * revert removing socket delays to reduce latency as it was causing\n   errors and test failures.\n * server: Client now emits more predictable 'end' events.\n\n### 0.7.2\n\n * fix objectData writer. This fixes sending an 0x17 packet.\n\n### 0.7.1\n\n * remove socket delays to reduce latency. (thanks mappum)\n\n### 0.7.0\n\n * `createServer`: rename `encryption-enabled` option to `encryption` to stay\n   consistent with the examples. (thanks roblabla)\n * `createClient`: don't require both `email` and `username`.\n   - The `username` and `password` arguments are used to authenticate with the\n     official minecraft servers and determine the case-correct username. If\n     you have migrated your user account to a mojang login, `username` looks\n     like an email address.\n   - If you leave out the `password` argument, `username` is used to connect\n     directly to the server. In this case you will get kicked if the server is\n     in online mode.\n\n### 0.6.7\n\nEmit 'error' event instead of crashing when other computers abuse the\nminecraft protocol.\n\nBig thanks to [Robin Lambertz](https://github.com/roblabla) for this release.\n\n### 0.6.6\n\n * ping: fix calling callback twice when server sends kick\n * server: send a kick packet when kicking clients. (thanks roblabla)\n * ping: include latency property (thanks Jan Buschtöns)\n\n### 0.6.5\n\n * createServer: allow empty options\n * server: support online mode and encryption (thanks roblabla)\n\n### 0.6.4\n\n * Allow minecraft username instead of mojang email. (thanks roblabla)\n\n### 0.6.3\n\n * y values when only 1 byte are always unsigned\n\n### 0.6.2\n\n * 0x0e: change face to unsigned byte\n\n### 0.6.1\n\n * 0x0d: fix incorrectly swapped stance and y\n",
  "readmeFilename": "README.md",
  "_id": "minecraft-protocol@0.7.8",
  "_from": "minecraft-protocol@0.7.8",
  "dist": {
    "shasum": "966ee40eede2e77d8c7c2db4ea7367ce5b71a3f8"
  },
  "_resolved": "https://registry.npmjs.org/minecraft-protocol/-/minecraft-protocol-0.7.8.tgz"
}
