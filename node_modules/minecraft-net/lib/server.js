var net = require('net'),
    events = require('events'),
    util = require('util');

var Packet = require(__dirname + '/packet.js'),
    protocol = require(__dirname + '/protocol.js'),
    constants = require(__dirname + '/constants.js'),
    Socket = require(__dirname + '/socket.js');

/** @constructor */
var Server = function(options) {
    events.EventEmitter.call(this);

    options = options || {};

    this.protocol = options.protocol || 51;
    this.version = options.version || '1.4.6';
    this.motd = options.motd || 'A Minecraft server';
    this.players = options.players || 0;
    this.maxPlayers = options.maxPlayers || 0;

    this.requireAuth = options.requireAuth && true;

    this.server = net.createServer();
};
util.inherits(Server, events.EventEmitter);

Server.prototype.listen = function(port, host, callback) {
    if(typeof port === 'function') {
        callback = port;
        port = host = undefined;
    } else if(typeof host === 'function') {
        callback = host;
        host = undefined;
    }

    this.port = port || 25565;
    this.host = host;

    if(callback) this.once('listening', callback);

    this.server.on('connection', this.onConnection.bind(this));

    this.server.listen(this.port, this.host, null, function() {
        this.emit('listening');
    }.bind(this));
};

Server.prototype.onConnection = function(connection) {
    var socket = new Socket({
        socket: connection,
        isServer: true,
        keepAlive: false  // don't send keepalive packets until user is authed
    });

    socket.on('error', function(error) { this.emit('error', error); }.bind(this));

    // listen for ping
    socket.once(0xfe, function(packet) {
        if(!socket.connected) {
            this.onPing(socket, packet);
            socket.close();
        }
    }.bind(this));

    // listen for handshake
    socket.on(0x02, function(packet) {
        if(!socket.connected) {
            this.onHandshake(socket, packet);
        } else {
            socket.close();
            this.emit('close', {error: 'Client was already connected, but tried to handshake'});
        }
    }.bind(this));
};

Server.prototype.onPing = function(socket) {
    socket.write(0xff, {
        reason: ['ยง1', this.protocol, this.version, this.motd, this.players, this.maxPlayers].join('\u0000')
    });
};

Server.prototype.onHandshake = function(socket, handshake) {
    var finishConnection = function() {
        socket.connected = true;
        socket.keepAlive = true;
        this.emit('connection', socket, handshake);
    }.bind(this);

    if(this.requireAuth) {
        //var serverId = 
    } else {
        finishConnection();
    }
};

Server.prototype.address = function() {
    return this.server.address();
};

module.exports = Server;