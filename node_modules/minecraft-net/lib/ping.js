var protocol = require(__dirname + '/protocol.js');
var net = require('net');

var ping = module.exports = function(options, _callback) {
    var callback = function() {
        if(_callback) _callback.apply(this, arguments);
        _callback = null;
    };

    try {
        var host = options.host || 'localhost';
        var port = options.port || 25565;
        var socket = net.connect(port, host, function() {
            socket.once('data', function(data) {
                var string = protocol.datatypes.STRING.unpack(data.slice(1));
                socket.end();

                if(data[0] !== 0xff) {
                    callback(new Error('Invalid response'));
                    return;
                }

                var split = string.value.split('\u0000');
                if(split[0] !== 'ยง1') {
                    callback(new Error('Invalid response'));
                    return;
                }

                var output = {
                    protocol: split[1],
                    version: split[2],
                    motd: split[3],
                    players: split[4],
                    maxPlayers: split[5]
                };

                callback(null, output);
            });

            socket.write(new Buffer([0xfe, 0x01]));
        });
        socket.setNoDelay(true);
        socket.setTimeout(5000, function() {
            callback('Connection timed out');

        });
        socket.on('error', function(err) {
            callback(err);
        });
    } catch(err) {
        callback(err);
    }
};